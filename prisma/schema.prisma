// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema ecommerce`s database
model User {
  id        Int       @id @default(autoincrement())
  dni       String    @unique
  name      String
  lastName  String
  email     String    @unique
  password  String
  phone     String
  company   String?
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  Address   Address[]
  Review    Review[]
  Order     Order[]
  Payment   Payment[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Boolean  @default(true)
  user      User[]
}

model Product {
  id          Int      @id @default(autoincrement())
  code        String   @unique @default(uuid())
  name        String
  description String
  images      String[]
  tags        String[]
  stock       Int
  price       Float
  priceSale   Float
  isSale      Boolean
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Review      Review[]
  Order       Order[]
}

model Order {
  id        String      @id @default(cuid())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  productId Int
  product   Product     @relation(fields: [productId], references: [id])
  quantity  Int
  status    OrderStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Payment   Payment[]
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  city      String
  state     String
  zip       String
  reference String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String   @id @default(cuid())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id])
  tokenPayPhone String
  amount        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      Boolean       @default(true)
  SubCategory SubCategory[]
  Product     Product[]
}

model SubCategory {
  id         String   @id @default(cuid())
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     Boolean  @default(true)
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}
